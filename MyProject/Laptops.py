import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = pd.read_csv('laptop_price.csv')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
def extract_cpu_frequency(cpu_str):
    match = re.search(r'(\d+\.\d+)', str(cpu_str))
    return float(match.group(1)) if match else np.nan

data['Cpu_Freq_GHz'] = data['Cpu'].apply(extract_cpu_frequency)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ (RAM)
def extract_ram(ram_str):
    match = re.search(r'(\d+)', str(ram_str))
    return int(match.group(1)) if match else np.nan

data['RAM_GB'] = data['Ram'].apply(extract_ram)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ SSD (1 = SSD, 0 = HDD)
data['SSD'] = data['Memory'].apply(lambda x: 1 if 'SSD' in str(x) else 0)

# –ö–æ–¥–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥ –Ω–æ—É—Ç–±—É–∫–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫)
data['Brand'] = data['Company'].astype('category').cat.codes

# –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
data = data.dropna()

# –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
X = data[['Cpu_Freq_GHz', 'RAM_GB', 'SSD', 'Brand']]
y = data['Price_euros']

# –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –°–æ–∑–¥–∞—ë–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å (—Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å)
model = RandomForestRegressor(n_estimators=150, random_state=42)
model.fit(X_train, y_train)

# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã –Ω–æ—É—Ç–±—É–∫–æ–≤
y_pred = model.predict(X_test)

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("üìå Mean Squared Error:", mse)
print("üìà R2 Score:", r2)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.7, label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', linewidth=2, label="–ò–¥–µ–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
plt.xlabel("–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ (‚Ç¨)")
plt.ylabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ (‚Ç¨)")
plt.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –Ω–æ—É—Ç–±—É–∫–æ–≤")
plt.legend()
plt.show()